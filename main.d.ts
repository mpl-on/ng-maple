import { BehaviorSubject } from 'rxjs';
import { MapleVariableModel } from './types/variables.model';
export declare class Maple {
    private static CACHE;
    private static variables;
    private static breakpointMap;
    private static utilClassMap;
    private static utilPrefixList;
    private static propExtensionMap;
    private static rawCache;
    private static tempCache;
    static onStyleAppend$: BehaviorSubject<any>;
    static onInit$: BehaviorSubject<boolean>;
    constructor();
    private static setMinAndMaxBreakpoints;
    static createDomElements(styleElements: any, prefix?: string, document?: any): void;
    private static extendProperties;
    private static getSelectors;
    private static cache;
    private static styles;
    private static generateWhitelist;
    private static splitLastOccurrence;
    private static splitFirstOccurrence;
    static init(document: any, enabled: boolean, utilClassMap: any, whitelist: Array<string>, variables?: MapleVariableModel, isRtl?: boolean, utilPrefixList?: Array<any>, propExtensionMap?: any): void;
    static findAndFly(str: string): void;
    static convertUtilClassMapToRtl(utilityClass: any, isRtl: boolean): any;
    static fly(classList: any, shadowRoot?: DocumentFragment): void;
    static unifyUtilityClass(classList: Array<string>): Array<string>;
    static appendStyle(styleElements: any, bp: string, style: string, silent?: boolean, shadowRoot?: DocumentFragment): void;
    static isMediaValid(media: string): boolean;
    static isBreakpointValid(breakpoint: string): boolean;
    static isMediaMatchesWithBreakpoint(media: string, breakpoint: string): boolean;
    static getValidMediaMap(): any;
    static getMinMedia(): string;
    static getMinBreakpoint(): string;
    static getMappedMediaOrMin(media: string): string;
    static getMappedMediaOrNull(media: string): string;
    static getMappedBreakpointOrMin(breakpoint: string): string;
    static getMappedBreakpointOrNull(breakpoint: string): string;
    static getVariables(): MapleVariableModel;
    static fillInTheGaps(breakpointMap: any): any;
    static isBreakpointMap(breakpointMap: any): any;
}
//# sourceMappingURL=main.d.ts.map