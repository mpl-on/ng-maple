// tslint:disable: no-bitwise
export class MapleColorHelper {
    static getContrastColor(hexColor) {
        if (!hexColor) {
            return '';
        }
        let hex = hexColor.replace('#', '');
        if (hex.length === 3) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        const r = parseInt(hex.substr(0, 2), 16);
        const g = parseInt(hex.substr(2, 2), 16);
        const b = parseInt(hex.substr(4, 2), 16);
        const yiq = (r * 299 + g * 587 + b * 114) / 1000;
        return yiq >= 128 ? '#000' : '#fff';
    }
    static alpha2hex(alpha) {
        alpha = ((1 << 8) + Math.round(parseFloat(alpha) * 255))
            .toString(16)
            .slice(1);
        return alpha === 'ff' ? '' : alpha;
    }
    static hex8(hex, opacity = 1) {
        return `#${MapleColorHelper.hex2Short(hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, (m, r, g, b) => '#' + r + r + g + g + b + b) + MapleColorHelper.alpha2hex(opacity.toString()))}`;
    }
    static hex2Short(hex) {
        if (hex.length > 6) {
            const hexArr = hex.replace('#', '').split('');
            return hexArr[0] === hexArr[1] &&
                hexArr[2] === hexArr[3] &&
                hexArr[4] === hexArr[5] &&
                hexArr[6] === hexArr[7]
                ? hexArr[0] + hexArr[2] + hexArr[4] + (hexArr[6] || '')
                : hexArr.join('');
        }
        return hex;
    }
    static generateAlphaColors(color) {
        Object.keys(color)
            .filter((key) => color[key].charAt(0) === '#' && key !== 'transparent')
            .forEach((key) => {
            [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1].forEach((opacity) => {
                color[`${key}-${opacity * 100}`] = MapleColorHelper.hex8(color[key], opacity);
            });
        });
        return color;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3IuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vY29yZS9zcmMvaGVscGVycy9jb2xvci5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCO0FBQzdCLE1BQU0sT0FBTyxnQkFBZ0I7SUFDcEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQWdCO1FBQzdDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDYixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDcEMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwQixHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6QyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFB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QyxDQUFDO1FBQ0wsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTogbm8tYml0d2lzZVxuZXhwb3J0IGNsYXNzIE1hcGxlQ29sb3JIZWxwZXIge1xuICBwdWJsaWMgc3RhdGljIGdldENvbnRyYXN0Q29sb3IoaGV4Q29sb3I6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCFoZXhDb2xvcikge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBsZXQgaGV4ID0gaGV4Q29sb3IucmVwbGFjZSgnIycsICcnKTtcbiAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMykge1xuICAgICAgaGV4ID0gaGV4WzBdICsgaGV4WzBdICsgaGV4WzFdICsgaGV4WzFdICsgaGV4WzJdICsgaGV4WzJdO1xuICAgIH1cbiAgICBjb25zdCByID0gcGFyc2VJbnQoaGV4LnN1YnN0cigwLCAyKSwgMTYpO1xuICAgIGNvbnN0IGcgPSBwYXJzZUludChoZXguc3Vic3RyKDIsIDIpLCAxNik7XG4gICAgY29uc3QgYiA9IHBhcnNlSW50KGhleC5zdWJzdHIoNCwgMiksIDE2KTtcbiAgICBjb25zdCB5aXEgPSAociAqIDI5OSArIGcgKiA1ODcgKyBiICogMTE0KSAvIDEwMDA7XG4gICAgcmV0dXJuIHlpcSA+PSAxMjggPyAnIzAwMCcgOiAnI2ZmZic7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFscGhhMmhleChhbHBoYTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBhbHBoYSA9ICgoMSA8PCA4KSArIE1hdGgucm91bmQocGFyc2VGbG9hdChhbHBoYSkgKiAyNTUpKVxuICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgLnNsaWNlKDEpO1xuICAgIHJldHVybiBhbHBoYSA9PT0gJ2ZmJyA/ICcnIDogYWxwaGE7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGhleDgoaGV4OiBzdHJpbmcsIG9wYWNpdHk6IG51bWJlciA9IDEpOiBzdHJpbmcge1xuICAgIHJldHVybiBgIyR7TWFwbGVDb2xvckhlbHBlci5oZXgyU2hvcnQoXG4gICAgICBoZXgucmVwbGFjZShcbiAgICAgICAgL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaSxcbiAgICAgICAgKG0sIHIsIGcsIGIpID0+ICcjJyArIHIgKyByICsgZyArIGcgKyBiICsgYixcbiAgICAgICkgKyBNYXBsZUNvbG9ySGVscGVyLmFscGhhMmhleChvcGFjaXR5LnRvU3RyaW5nKCkpLFxuICAgICl9YDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgaGV4MlNob3J0KGhleDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAoaGV4Lmxlbmd0aCA+IDYpIHtcbiAgICAgIGNvbnN0IGhleEFyciA9IGhleC5yZXBsYWNlKCcjJywgJycpLnNwbGl0KCcnKTtcbiAgICAgIHJldHVybiBoZXhBcnJbMF0gPT09IGhleEFyclsxXSAmJlxuICAgICAgICBoZXhBcnJbMl0gPT09IGhleEFyclszXSAmJlxuICAgICAgICBoZXhBcnJbNF0gPT09IGhleEFycls1XSAmJlxuICAgICAgICBoZXhBcnJbNl0gPT09IGhleEFycls3XVxuICAgICAgICA/IGhleEFyclswXSArIGhleEFyclsyXSArIGhleEFycls0XSArIChoZXhBcnJbNl0gfHwgJycpXG4gICAgICAgIDogaGV4QXJyLmpvaW4oJycpO1xuICAgIH1cbiAgICByZXR1cm4gaGV4O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBnZW5lcmF0ZUFscGhhQ29sb3JzKGNvbG9yOiBhbnkpOiBzdHJpbmcge1xuICAgIE9iamVjdC5rZXlzKGNvbG9yKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBjb2xvcltrZXldLmNoYXJBdCgwKSA9PT0gJyMnICYmIGtleSAhPT0gJ3RyYW5zcGFyZW50JylcbiAgICAgIC5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgWzAuOSwgMC44LCAwLjcsIDAuNiwgMC41LCAwLjQsIDAuMywgMC4yLCAwLjFdLmZvckVhY2goKG9wYWNpdHkpID0+IHtcbiAgICAgICAgICBjb2xvcltgJHtrZXl9LSR7b3BhY2l0eSAqIDEwMH1gXSA9IE1hcGxlQ29sb3JIZWxwZXIuaGV4OChcbiAgICAgICAgICAgIGNvbG9yW2tleV0sXG4gICAgICAgICAgICBvcGFjaXR5LFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG59XG4iXX0=